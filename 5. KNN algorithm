import numpy as np
from collections import Counter
def euclidean_distance(a, b):
    return np.sqrt(np.sum((a - b) ** 2))
def knn_predict(X_train, y_train, X_test, k=3):
    predictions = []
    for test_point in X_test:
        distances = [euclidean_distance(test_point, x) for x in X_train]
        k_indices = np.argsort(distances)[:k]
        k_nearest_labels = [y_train[i] for i in k_indices]
        majority_vote = Counter(k_nearest_labels).most_common(1)[0][0]
        predictions.append(majority_vote)
    return np.array(predictions)
X_train = np.array([[5.1, 3.5, 1.4, 0.2],
                    [7.0, 3.2, 4.7, 1.4],
                    [6.3, 3.3, 6.0, 2.5]])
y_train = np.array([0, 1, 2])
X_test = np.array([[6.0, 3.0, 4.8, 1.8]])
y_pred = knn_predict(X_train, y_train, X_test, k=1)
print("Predicted class for", X_test[0], ":", y_pred[0])

output:
Predicted class for [6.  3.  4.8 1.8] : 1
