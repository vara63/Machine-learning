import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
data = pd.DataFrame({
    'RAM_GB': [4, 6, 8, 4, 12, 6, 8, 4, 6, 8],
    'ROM_GB': [64, 128, 128, 32, 256, 64, 128, 32, 64, 256],
    'Battery_mAh': [4000, 4500, 5000, 3000, 6000, 4000, 4800, 3500, 4200, 5500],
    'Display_inches': [6.1, 6.5, 6.7, 5.8, 6.9, 6.2, 6.4, 5.5, 6.0, 6.8],
    'Rear_Cam_MP': [12, 48, 64, 8, 108, 16, 48, 13, 24, 64],
    'Front_Cam_MP': [8, 16, 32, 5, 32, 12, 16, 8, 13, 24],
    'Price': [12000, 18000, 25000, 8000, 35000, 15000, 22000, 9000, 14000, 30000]
})
X = data.drop('Price', axis=1)
y = data['Price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)
print("Root Mean Squared Error (RMSE):", round(rmse, 2))
print("R² Score:", round(r2, 4))
new_phone = pd.DataFrame({
    'RAM_GB': [8],
    'ROM_GB': [128],
    'Battery_mAh': [4500],
    'Display_inches': [6.5],
    'Rear_Cam_MP': [64],
    'Front_Cam_MP': [32]
})
predicted_price = model.predict(new_phone)
print("\nPredicted Price for new phone:", round(predicted_price[0], 2))

output:
Root Mean Squared Error (RMSE): 1472.38
R² Score: 0.9627

Predicted Price for new phone: 23824.16
