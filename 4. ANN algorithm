import numpy as np
def sigmoid(x):
    return 1 / (1 + np.exp(-x))
def sigmoid_deriv(x):
    return x * (1 - x)
X = np.array([[0, 0],
              [0, 1],
              [1, 0],
              [1, 1]])

y = np.array([[0], [1], [1], [1]])
np.random.seed(42)
input_layer_size = 2
hidden_layer_size = 2
output_layer_size = 1
weights_input_hidden = np.random.uniform(-1, 1, (input_layer_size, hidden_layer_size))
bias_hidden = np.random.uniform(-1, 1, (1, hidden_layer_size))
weights_hidden_output = np.random.uniform(-1, 1, (hidden_layer_size, output_layer_size))
bias_output = np.random.uniform(-1, 1, (1, output_layer_size))
epochs = 10000
learning_rate = 0.1
for epoch in range(epochs):
    hidden_input = np.dot(X, weights_input_hidden) + bias_hidden
    hidden_output = sigmoid(hidden_input)
    final_input = np.dot(hidden_output, weights_hidden_output) + bias_output
    final_output = sigmoid(final_input)
    error = y - final_output
    loss = np.mean(error**2)
    d_output = error * sigmoid_deriv(final_output)
    error_hidden = d_output.dot(weights_hidden_output.T)
    d_hidden = error_hidden * sigmoid_deriv(hidden_output)
    weights_hidden_output += hidden_output.T.dot(d_output) * learning_rate
    bias_output += np.sum(d_output, axis=0, keepdims=True) * learning_rate
    weights_input_hidden += X.T.dot(d_hidden) * learning_rate
    bias_hidden += np.sum(d_hidden, axis=0, keepdims=True) * learning_rate
    if epoch % 1000 == 0:
        print(f"Epoch {epoch}, Loss: {loss:.4f}")
print("\nTrained Output:")
print(np.round(final_output))
test_input = np.array([[1, 1]])
hidden_test = sigmoid(np.dot(test_input, weights_input_hidden) + bias_hidden)
output_test = sigmoid(np.dot(hidden_test, weights_hidden_output) + bias_output)
print("\nPrediction for input [1, 1]:", np.round(output_test[0][0]))

output:
Epoch 0, Loss: 0.2971
Epoch 1000, Loss: 0.0089
Epoch 2000, Loss: 0.0033
...
Trained Output:
[[0.]
 [1.]
 [1.]
 [1.]]

Prediction for input [1, 1]: 1.0
